---
import {personalStuff} from "../../data/exportContent";
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout>
    <my-stuff data-personalStuff={JSON.stringify(personalStuff)}>
        <aside>
            <a class="SuperCat">Events</a>
            <a class="SuperCat">Guitars</a>
            <a class="SuperCat">Skin Care</a>
            <a class="SuperCat">Cosplay</a>
        </aside>
        <aside>
            <div id="root"></div>
        </aside>
    </my-stuff>
</BaseLayout>

<style>
    .SuperCat {
        padding: 5px;
    }

    :hover .SuperCat {
        cursor: pointer;
    }
</style>

<script>
    import type {cosplayType} from "../../data/personalList/cosplays";
    import type {MyStuffType} from "../../data/exportContent";
    import {tableMaker} from "../utils/tableHelper";
    import type {Guitar} from "../../data/personalList/guitars";
    import type {skinCareType} from "../../data/personalList/skincare";
    import type {eventType} from "../../data/personalList/eventsStory";
    
    const enum EtypeContent {
        Events,
        Guitars,
        SkinCare,
        Cosplay,
    }

    const cosplayHeaderTable = [
        "Character Name",
        "Series Name",
        "Outfit Name",
        "Pending",
        "Done",
        "Event Planned",
        "Event Done",
        "TrackList (Guitar)",
    ];
    
    const cosplayMapping = (e: cosplayType) => [
        e.characterName,
        e.seriesName,
        e.outfitName,
        e.pending,
        e.done,
        e.eventPlanned && e.eventPlanned.length !== 0
            ? e.eventPlanned.reduce((x, y) => x + "," + y)
            : "",
        e.eventDone && e.eventDone.length !== 0
            ? e.eventDone.reduce((x, y) => x + "," + y)
            : "",
        e.trackList && e.trackList.length !== 0
            ? e.trackList.reduce((x, y) => x + "," + y)
            : "",
    ];

    const skincareHeaderTable = [
        "Type",
        "Manufacturer",
        "Model",
        "Activity Year",
    ];
    const skincareMapping = (e: skinCareType) => [
        e.type,
        e.manufacturer,
        e.model,
        e.activityYear
    ];

    const guitarHeaderTable = [
        "Manufacturer",
        "Type",
        "Model",
        "Origin",
        "Activity Year",
        "Description",
    ];
    const guitarMapping = (e: Guitar) => [
        e.Manufacturer,
        e.Type,
        e.Model,
        e.Origin,
        e.ActivityYear,
        e.Description,
    ];

    const eventHeaderTable = [
        "Year",
        "Event Name",
        "Category",
        "Location",
        "Description",
    ];
    const eventMapping = (e: eventType) => [
        e.year.toString(),    
        e.eventName,
        e.category,
        e.location,
        e.description
        ];

    function setGuitarItems(cat: Array<Guitar>, body: Element) {
        setGenericTable(body, "Guitar", guitarHeaderTable, cat.map(guitarMapping));
    }

    function setCosplayItems(cat: Array<cosplayType>, body: Element) {
        setGenericTable(body, "Cosplay", cosplayHeaderTable, cat.map(cosplayMapping));
    }

    function setSkinCareItems(cat: Array<skinCareType>, body: Element) {
        setGenericTable(body, "Skin Care", skincareHeaderTable, cat.map(skincareMapping));
    }

    function setEventItems(cat: Array<eventType>, body: Element) {
        setGenericTable(body, "Event", eventHeaderTable, cat.map(eventMapping));
    }

    function setGenericTable(body: Element, nameSection: string, tableHeader: Array<string>, tableContent: (string | Element | undefined)[][])
    {
        let subBody: Element = document.createElement("div");
        let sample: Element;

        sample = document.createElement("div");
        sample.textContent = nameSection + ":";
        body.append(sample);

        subBody.append(tableMaker(tableHeader, tableContent));
        body.append(subBody);
    }

    class myStuff extends HTMLElement {
        myStuff!: MyStuffType;
        superLayoutId: EtypeContent = EtypeContent.Cosplay;
        body: Element = Element.prototype;

        setClickSelection(index: number) {
            if (!this.myStuff) {
                return;
            }
            this.body.innerHTML = "";
            this.superLayoutId = index;

            switch (this.superLayoutId) {
                case EtypeContent.Cosplay:
                    setCosplayItems(this.myStuff.cosplay, this.body);
                    break;
                case EtypeContent.SkinCare:
                    setSkinCareItems(this.myStuff.skinCare, this.body);
                    break;
                case EtypeContent.Guitars:
                    setGuitarItems(this.myStuff.guitars, this.body);break;
                case EtypeContent.Events:
                    setEventItems(this.myStuff.events, this.body);break;
                default:
                    break;
            }
        }

        connectedCallback() {
            console.log("It's loading");
            const body = document.getElementById("root");

            if (!body) {
                console.log("No Body");
                return;
            }
            this.body = body;

            const buttons = document.querySelectorAll("a.SuperCat");
            const awesomeListString = this.dataset.personalstuff;
            if (!awesomeListString) {
                console.log("No Awesomelist");
                return;
            }

            this.myStuff = JSON.parse(awesomeListString) as MyStuffType;
            // Handle clicks on each button.
            buttons.forEach((button, index) => {
                button.addEventListener("click", () =>
                    this.setClickSelection(index),
                );
            });
        }
    }

    customElements.define("my-stuff", myStuff);
</script>
